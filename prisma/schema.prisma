// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id       String    @id @default(uuid())
  name     String
  email    String   @unique
  password String
  role     Role     @default(CUSTOMER)
  tokens   Token[]
  product  Product[]
  cart     Cart[]
  order    Order[]   @relation("UserOrders")
  sales    Order[]   @relation("SellerOrders")
  reviews  Review[]
}


model Token {
  id        String    @id @default(uuid())
  userId    String
  token     String    @db.Text 
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

enum Role {
  CUSTOMER
  SELLER
  ADMIN
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating     Int      @default(1) // Rating dari 1 sampai 5
  comment    String?  // Komentar opsional
  createdAt  DateTime @default(now())

  @@unique([userId, productId]) // Membatasi satu review per user per produk
}


model Product {
  id          String    @id @default(uuid()) 
  name        String
  description String
  price       Float
  condition   Condition @default(NEW)
  stock       Int       @default(0)
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId      String    
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cartItem    CartItem[]
  orderItem   OrderItem[]
  reviews     Review[]

  @@index([name])
}

model Category {
  id          String       @id @default(uuid())
  name        String
  description String
  products    Product[]
}

enum Condition {
  NEW
  LIGHTLY_USED
  NEEDS_REPAIR
}

model Cart {
  userId    String         @id @default(uuid())
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model CartItem {
  id        String    @id @default(uuid())
  cartId    String
  cart      Cart      @relation(fields: [cartId], references: [userId], onDelete: Cascade)
  productId String
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int       @default(1)
  createdAt DateTime  @default(now())
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  sellerId   String
  user       User        @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  seller     User        @relation("SellerOrders", fields: [sellerId], references: [id], onDelete: Cascade)
  totalPrice Float
  status     OrderStatus @default(PENDING)
  payment    Payment?
  shipping   Shipping?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItem  OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  price     Float    // Price at the time of purchase
  createdAt DateTime @default(now())
}


model Payment {
  id       String   @id @default(uuid())
  orderId  String   @unique
  method   PaymentMethod
  status   PaymentStatus @default(PENDING)
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  paidAt   DateTime?
}

model Shipping {
  id       String   @id @default(uuid())
  orderId  String   @unique
  address  String
  status   ShippingStatus @default(PENDING)
  shippedAt DateTime?     
  deliveredAt DateTime?
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum ShippingStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}